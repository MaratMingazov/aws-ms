
AWSTemplateFormatVersion: '2010-09-09'
Description: This template deploys an Instance

Parameters:
  ImportedStackName:
    Type: String

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  InstanceType:
    Type: String
    Description: WebServer EC2 instance type
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
    ConstraintDescription: Must be a valid EC2 instance type

  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
      should be connected to. Use * to send all load balancer
      traffic to this service.

  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
      This only applies if your have multiple services which have been
      assigned to different paths on the load balancer.
      

Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
       Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.medium:
      Arch: HVM64

  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0dfcb1ef8550277af
    us-west-2:
      HVM64: ami-7172b611
    us-west-1:
      HVM64: ami-31490d51
    eu-west-1:
      HVM64: ami-f9dd458a
    eu-west-2:
      HVM64: ami-886369ec
    us-east-2:
      HVM64: ami-f6035893



Resources:

  WebServerInstance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap ["AWSRegionArch2AMI", !Ref AWS::Region, !FindInMap ["AWSInstanceType2Arch", !Ref InstanceType, "Arch"] ]
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${ImportedStackName}-WebServerSecurityGroup
      SubnetId:
        Fn::ImportValue: !Sub ${ImportedStackName}-WebServerPublicSubnet1
      Tags:
        - Key: Name
          Value: WebServerInstance1
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          sudo su
          yum update -y
          yum install httpd -y
          echo “Hello World from $(hostname -f)” > /var/www/html/index.html
          systemctl start httpd

  WebServerInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap [ "AWSRegionArch2AMI", !Ref AWS::Region, !FindInMap [ "AWSInstanceType2Arch", !Ref InstanceType, "Arch" ] ]
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${ImportedStackName}-WebServerSecurityGroup
      SubnetId:
        Fn::ImportValue: !Sub ${ImportedStackName}-WebServerPublicSubnet2
      Tags:
        - Key: Name
          Value: WebServerInstance2
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          sudo su
          yum update -y
          yum install httpd -y
          echo “Hello World from $(hostname -f)” > /var/www/html/index.html
          systemctl start httpd

  WebServerApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WebServerApplicationLoadBalancer
      Scheme: internet-facing
      Type: application
      Subnets:
        - Fn::ImportValue: !Sub ${ImportedStackName}-WebServerPublicSubnet1
        - Fn::ImportValue: !Sub ${ImportedStackName}-WebServerPublicSubnet2
      SecurityGroups:
        - Fn::ImportValue: !Sub ${ImportedStackName}-WebServerSecurityGroup
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.prefix
          Value: webserver-loadbalancer-logs
        - Key: access_logs.s3.bucket
          Value: maratmingazovr

  WebServerInstanceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/index.html'
      Port: 80
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: instance
      Targets:
        - Id: !Ref WebServerInstance1
          Port: 80
        - Id: !Ref WebServerInstance2
          Port: 80
      Matcher:
        HttpCode: '200'
      HealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: !Sub ${ImportedStackName}-WebServerVPC
      Name: WebServerInstanceTargetGroup

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebServerApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref WebServerInstanceTargetGroup
          Type: forward

  # Create a rule on the load balancer for routing traffic to the target group
  WebServerLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref WebServerInstanceTargetGroup
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      ListenerArn: !Ref HTTPListener
      Priority: !Ref Priority

Outputs:
  LoadBalancerRule:
    Description: A reference to the created WebServerInstanceLoadBalancerRule
    Value: !Ref WebServerLoadBalancerRule
    Export:
      Name: !Sub ${AWS::StackName}-WebServerLoadBalancerRule