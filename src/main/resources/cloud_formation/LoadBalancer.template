
AWSTemplateFormatVersion: '2010-09-09'
Description: This template deploys an Instance

Parameters:
  ImportedVPCStack:
    Type: String
    Default: VPCStack

  LoadBalancerLogsBucketName:
    Type: String
    Default: maratmingazovr


  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
      should be connected to. Use * to send all load balancer
      traffic to this service.

  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
      This only applies if your have multiple services which have been
      assigned to different paths on the load balancer.


Resources:

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-LoadBalancer
      Scheme: internet-facing
      Type: application
      Subnets:
        - Fn::ImportValue: !Sub ${ImportedVPCStack}-PublicSubnet1
        - Fn::ImportValue: !Sub ${ImportedVPCStack}-PublicSubnet2
      SecurityGroups:
        - Fn::ImportValue: !Sub ${ImportedVPCStack}-SecurityGroup
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref LoadBalancerLogsBucketName

  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckEnabled: true
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub ${ImportedVPCStack}-DummyTargetGroup
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub ${ImportedVPCStack}-VPC
      Matcher:
        HttpCode: '200'

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - TargetGroupArn: !Ref DummyTargetGroup
          Type: forward



#  # Create a rule on the load balancer for routing traffic to the target group
#  WebServerLoadBalancerRule:
#    Type: AWS::ElasticLoadBalancingV2::ListenerRule
#    Properties:
#      Actions:
#        - TargetGroupArn: !Ref WebServerInstanceTargetGroup
#          Type: 'forward'
#      Conditions:
#        - Field: path-pattern
#          Values:
#            - !Ref Path
#      ListenerArn: !Ref HTTPListener
#      Priority: !Ref Priority

Outputs:
  LoadBalancer:
    Description: A reference to LoadBalancer
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancer
  LoadBalancerUrl:
    Description: The url of the load balancer
    Value: !Join ['', ['http://', !GetAtt 'LoadBalancer.DNSName']]
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerUrl
  HTTPListener:
    Description: HTTPListener
    Value: !Ref HTTPListener
    Export:
      Name: !Sub ${AWS::StackName}-HTTPListener
#  LoadBalancerRule:
#    Description: A reference to the created WebServerInstanceLoadBalancerRule
#    Value: !Ref WebServerLoadBalancerRule
#    Export:
#      Name: !Sub ${AWS::StackName}-WebServerLoadBalancerRule