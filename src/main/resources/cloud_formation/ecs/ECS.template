
AWSTemplateFormatVersion: '2010-09-09'
Description: This template deploys an ECS cluster

Parameters:
  ImportedVPCStack:
    Type: String
    Default: VPCStack

  ServiceName:
    Type: String
    Default: WebServerECSService
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: nginx
    Description:  The url of a docker image that contains the application process that
                  will handle the traffic for this service
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  ContainerPort:
    Type: Number
    Default: 8080
    Description: What port number the application inside the docker container is binding to
  Role:
    Type: String
    Default: ""
    Description:  (Optional) An IAM role to give the service's containers if the code within needs to
                  access other AWS resources like S3 buckets, DynamoDB tables, etc

Conditions:
  HasCustomRole: !Not [ !Equals [!Ref Role, ''] ]

Resources:

  # ECS Resources
  # We define the cluster and a security group that we will later need in the service stack.
  #The security group allows inbound traffic from the load balancer (or, more specifically,
  # from everything in the PublicLoadBalancerSecurityGroup) and
  # inbound traffic from everything in the same security group so that our Docker containers can later talk to each other.
  ECSCluster:
    Type: AWS::ECS::Cluster

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Access to ECS containers'
      VpcId: !Sub ${ImportedVPCStack}-VPC

  ECSSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public LoadBalancer
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId:
        Fn::ImportValue: !Sub ${ImportedVPCStack}-SecurityGroup

  ECSSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ECSSecurityGroup


  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'

                  # Rules which allow ECS to update load balancers on your behalf
                  # with the information sabout how to send traffic to your containers
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'





#  # The task definition. This is a simple metadata description of what
#  # container to run, and what resource requirements it has.
#  TaskDefinition:
#    Type: AWS::ECS::TaskDefinition
#    Properties:
#      Family: !Ref ServiceName
#      Cpu: !Ref ContainerCpu
#      Memory: !Ref ContainerMemory
#      NetworkMode: awsvpc
#      RequiresCompatibilities:
#        - FARGATE
#      ExecutionRoleArn: !Ref ECSTaskExecutionRole
#      TaskRoleArn:
#        Fn::If:
#          - HasCustomRole
#          - !Ref Role
#          - !Ref AWS::NoValue
#      ContainerDefinitions:
#        - Name: !Ref ServiceName
#          Cpu: !Ref ContainerCpu
#          Memory: !Ref ContainerMemory
#          Image: !Ref ImageUrl
#          PortMappings:
#            - ContainerPort: !Ref ContainerPort


#  # The service. The service is a resource which allows you to run multiple
#  # copies of a type of task, and gather up their logs and metrics, as well
#  # as monitor the number of running tasks and replace any that have crashed
#  Service:
#    Type: AWS::ECS::Service
#    DependsOn:



Outputs:
  ECSClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [ '-', [ !Ref 'AWS::StackName', 'WebServerECSCluster' ] ]